// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String     @id @default(uuid())
  username  String
  email     String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reviews   Reviews[]
  builders  Builders[]

  @@map("users")
}

model Categories {
  id              String            @id @default(uuid())
  categoryName    String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  components      Components[]
  buildComponents BuildComponents[]

  @@map("categories")
}

model Components {
  id          String   @id @default(uuid())
  brand       String
  categoryId  String
  model       String
  description String
  price       String
  stock       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories Categories @relation(fields: [categoryId], references: [id])
  reviews    Reviews[]

  @@map("components")
}

model Builders {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users           Users             @relation(fields: [userId], references: [id])
  buildComponents BuildComponents[]

  @@map("builders")
}

model BuildComponents {
  id         String   @id @default(uuid())
  buildId    String
  categoryId String
  quantity   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  builders   Builders   @relation(fields: [buildId], references: [id])
  categories Categories @relation(fields: [categoryId], references: [id])

  @@map("buildComponents")
}

model Reviews {
  id          String   @id @default(uuid())
  userId      String
  componentId String
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users      Users      @relation(fields: [userId], references: [id])
  components Components @relation(fields: [componentId], references: [id])

  @@map("reviews")
}
